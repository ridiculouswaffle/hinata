#+TITLE: Hinata - My personal configuration made to be cute!

* What's this?

This is my personal config that I have made public for everyone to use!

** What's so special with this configuration?

This configuration is made to be /cute/, yeah, you heard that right, /to be kawaii/.
Most Emacs distributions don't do this, nor do many Emacs users want a cute setup. But
I'm the exception, I want to make Emacs cute. I have tried my very best in making
my configuration cute.

While this is my /personal configuration/, simply reading this file will give you an idea
on how to use this configuration yourself, or take the best out of my configuration for your
own!

Apart from being focused on being cute, this configuration is also focusing on performance and
usability. Like with this configuration, you have a fast Emacs and an Emacs you can /literally live/ inside!
You wouldn't have the need to use most of the other programs.

** What makes this config cute?

The use of emojis, all-the-icons and my own theme, [[https://github.com/ridiculouswaffle/hanami-emacs][Hanami]] makes
my config cute. It's basically a combination of a lot of things.

** Ok. How do I use this config?

Cloning this repo to your user-emacs-directory would be enough, but you can copy this file to your user-emacs-directory and type
(org-babel-load-file (concat user-emacs-directory "config.org")) to load this configuration!

Now, onto the configuration

* Setup

The first thing I want to do is set the GC threshold high. In case you don't know what a GC is,
Garbage collection (GC) is a process in which unused memory of a program is freed for other
tasks and processes to use. This threshold is pretty low by default, which makes GC run more
frequent. Garbage collection is pretty slow in Emacs (and in general). By making the threshold
high, you can reduce garbage collection, and this makes Emacs freeze less often.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

The next immediate thing I want to do is disable the titlebar for Emacs. This fix is only applied to emacs-plus users on MacOS. If you use any
other OS, I highly reccomend you turn off the titlebar of Emacs based on your OS. Since I use only MacOS for the time being, I'll add the fix
in the code. The fix was copied from [[https://github.com/d12frosted/homebrew-emacs-plus?tab=readme-ov-file#no-titlebar][here]]:

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(undecorated-round . t))
#+end_src

It is also reccomended you keep the rounded corners.

Another thing I want to add is increasing the read-process-output-max. This changes how much data a process can output to Emacs in a single read.
This significantly improves the performance of terminal emulators and LSP in Emacs.

#+begin_src emacs-lisp
  (setq read-process-output-max (* 16 1024 1024))
#+end_src

The value is set to 16x 1024MB (which is 16MB).

Long before when I was new to Emacs, I used package.el as it was builtin and worked pretty well. But after some time, I realized that
if I had to make a portable configuration, I need to use straight.el instead.

It is also helpful for me cause' I don't have my theme on MEPLA at the moment.

Let's install straight.el:

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Now there are other small issues I have, like backup files and autosaves. I'll explain what they are and
why I have changed their default behaviours

First let's begin with backup files. Think of backup files as a copy of the file you are editing. Let's say
you typed in 100 lines of code in a file. After some time, you override the file and add 200 lines of code. When this
happens, you wouldn't know what was in the file /before/ you added these 200 lines. This is where backups shine! They
keep a copy of every file, so you don't have to! This feature does not help in version controlled directories, but work
/very well/ in places without version control (this feature is disabled on version-controlled directories anyways)

Personally, if you ask me, I don't like the backups in my working directory, so I have changed it to ~/.emacs-backups.
This will be /Users/username/.emacs-backups for MacOS users, /home/username/.emacs-backups for Linux/BSD users, and
C:/Users/username/.emacs-backups for Windows users.

#+begin_src emacs-lisp
  (setq make-backup-files t ;; Explicitly setting it to t
	backup-directory-alist '(("." . "~/.emacs-backups"))) ;; It will save it in the file's location if it can't save it in  ~/.emacs-backups
#+end_src

Next is autosaves. If backups are /literal backups of your files/, autosaves are backups of your files when you haven't saved
for a long time. Saving these kind of files will usually delete the autosave. Autosaves work *everywhere*, regardless of version control.

Why? Imagine when you are editing your file mid-way, your computer crashes, or a power cut. If autosaves are enabled (they are, by default),
you can recover your edits by using M-x recover-file. Very useful, right?

I haven't changed anything in autosaves right now, since the defaults suffice. I hope the explanation was helpful, though!

Now, we're gonna install a package that fixes a very important issue in MacOS and Linux, shell variables.

Let's say you installed fastfetch from your distro/OS's package manager (what, you want me to install neofetch?
It's dead). You can easily run fastfetch in your terminals, but not through Emacs. The reason being Emacs doesn't know
where macchina is. Your shell does, by using the PATH variable. This variable is not sent to Emacs when:

- You are using Linux/*BSD, launching Emacs as a daemon, especially from systemd
- You are using MacOS, launching Emacs as a daemon

To fix this, you need to install a package named exec-path-from-shell. This package fixes this issue by retrieving
the PATH variable and setting it to Emacs on runtime.

The installation and usage is /very simple/. You just need these 3 lines:

#+begin_src emacs-lisp
  (when (daemonp)
    (straight-use-package 'exec-path-from-shell)
    (exec-path-from-shell-initialize))
#+end_src

And the PATH variable will be copied to Emacs from your shell everytime Emacs is run as a daemon (regardless of OS).

Don't just copy-paste this code to your config! You need straight.el for it.

Next up, I want to disable toolbars and scrollbars. The reasons being:
1. Toolbars are big and ugly (at least in MacOS. If it's nice for you, enable it again)
2. Scrollbars are ugly, can't be themed and are literally useless (in MacOS personally. Again, if you want it, enable it back!)

With my reasonings, let's disable those

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Next is font. If you use Emacs without changing your font, this is what your font might be depending on your OS:

- If you're using MacOS, it's [[https://en.wikipedia.org/wiki/Menlo_(typeface)][Menlo]]
- If you're using Windows, it's [[https://en.wikipedia.org/wiki/Courier_(typeface)][Courier New]]
- If you use Linux, *BSD or any other variant of Unix, Emacs would usually use [[https://dejavu-fonts.github.io/][DejaVu Sans]]

If you *actually* like these fonts, cool! I don't, so I have changed it to the glorious, beautiful and slender
font [[https://typeof.net/Iosevka/][Iosevka]]! TL;DR If you want to use another font, change this line here (cause' some other magic happens in this config, and you don't wanna fill
your font choice everywhere):

#+begin_src emacs-lisp
  (setq hinata-font "Iosevka 14")
#+end_src

Now, with the magic. If you use standalone Emacs (like, open Emacs as an app), this line would suffice:

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font hinata-font)
#+end_src

Now, the drawback to this is it won't work if you use Emacs as a daemon (think of a background-running Emacs you can connect to). To fill that gap,
this code fixes it on daemon frames.

#+begin_src emacs-lisp
  (add-hook 'after-make-frame-functions (lambda (frame)
					  (select-frame frame)
					  (set-frame-font hinata-font nil t)))
#+end_src

Next, the most important UI change is installing themes for Emacs. There are a plenty of themes for Emacs. Here are my reccomendations:

- [[https://nordtheme.com][Nord]] - A blue, nordic color scheme. My previous favourite theme
- [[https://github.com/morhetz/gruvbox][Gruvbox]] - A cool retro theme (do note that the link goes to the original Vim theme)
- [[https://draculatheme.com][Dracula]] - A purple, vampire-style theme. You might recognise this theme if you are coming from VS Code
- [[https://github.com/doomemacs/themes][Doom Themes]] - The official themes list for [[https://github.com/doomemacs/doomemacs][Doom Emacs]]. If you are coming from VS Code, chances are your favourite VS Code theme is here!

While I have listed these themes, I use none of these myself. I use my own theme, [[https://github.com/ridiculouswaffle/hanami-emacs][Hanami]]. It's a cute, cherry-blossoms inspired
dark theme that can be used by people who want to be /enlightened by kawaii.../

The installation's pretty simple. I'll paste it from my theme's README:

#+begin_src emacs-lisp
  ;; Install the package
  (straight-use-package
   '(hanami
     :type git
     :host nil
     :repo "https://github.com/ridiculouswaffle/hanami-emacs.git"))

  ;; Emacs doesn't recognize this as a theme, so add it to themes load path
  (add-to-list 'custom-theme-load-path
	       (expand-file-name "hanami" (straight--build-dir)))

  ;; Then load it.
  (load-theme 'hanami t)
#+end_src

Excellent! Now that things are working, it's time to enhance Emacs

* Packages

** All The Icons

[[https://github.com/domtronn/all-the-icons.el][All The Icons]] is, well, all the icons! It's a very nice collection of icons for Emacs. This package is essential
to make Emacs cute. Installation is pretty simple. I advise you to click that link to see how to install the fonts
(yes, it's a font and you got to install it to use it). Assuming you have done that, the setup is pretty easy:

#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :demand)
#+end_src

That's it. No other setup is required from our side.

** Dashboard

The first package I want to install is [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]]. This is what many of us see in Emacs rices and even on
popular Emacs distros like Doom Emacs and spacemacs.

It's installation is pretty simple, and it's beautiful to look at too, with enough configuration.

This is how you install it:

#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
    :init
    ;; Loads this dashboard in new frames
    (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))

    ;; I believe these lines are self-explanatory!
    (setq dashboard-banner-logo-title "Welcome back, senpai!"
	  dashboard-startup-banner 'logo
	  dashboard-center-content t
	  dashboard-vertically-center-content t
	  dashboard-show-shortcuts nil)

    ;; Now comes the fun part: Footer messages!
    (setq dashboard-footer-messages '(;; Anime references
				      "Nah I'd win"
				      "Are you the strongest because you use Emacs, or are you using Emacs because you are the strongest?"
				      "Don't worry, senpai will notice you!"
				      "'Using Emacs feels good when both are comfortable with each other' - Makima, reflecting on config"
				      "'Ignorance is bliss, Chainsaw Man!'"
				      "'Wanna do it?' - Himeno, asking you to edit your config"
				      "'Nothing cheers up a man faster than editing his Emacs config' - Katana Man"
				      ;; Emacs Humor
				      "'One who uses Emacs is a true programmer' - Sun Tzu, probably"
				      "'Thou shalt not employ Evil in Emacs, for it is nefarious' - Joe Mama"
				      "As ancient as the runes, as powerful as the dragons: Emacs."
				      "EMACS: Eight Megabytes And Constantly Swapping"
				      ;; Minecraft references
				      "Steve! Help me! I'm stuck"
				      "Creeper! Aww man"))

    (setq dashboard-icon-type 'all-the-icons) ;; Use all-the-icons for icons in this dashboard.
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (dashboard-setup-startup-hook))
#+end_src

I'll brainstorm more footer messages when I got time, but that's it for Emacs Dashboard.

** Vertico

[[https://github.com/minad/vertico][Vertico]] is a completion framework for the minibuffer. Without this, you would have trouble using
commands in Emacs. Sure, there are alternatives like Helm and Ivy, but I like my config to be lightweight
(Ivy is okay, Helm is too big). The setup's just 5 lines:

#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :config
    (vertico-mouse-mode) ;; Not needed, but it enables mouse scrolling and clicking
    :init (vertico-mode))
#+end_src

And that's done! Next, we need Marginalia

** Marginalia

[[https://github.com/minad/marginalia][Marginalia]] adds documentation to Vertico, that's why it's useful. Yep, that's it. Setup is similar to
Vertico (unless you use Ivy or Helm). This is how you install Marginlia

#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :init (marginalia-mode))
#+end_src

** Orderless

[[https://github.com/oantolin/orderless][Orderless]] is a package that makes things that use completing-read (which covers the minibuffer, in-buffer completion and
read-string calls) orderless! You can type with any order to get the command you want. Once you try it, you can never go back.

Setup is simple, got it from the README:

#+begin_src emacs-lisp
  (use-package orderless
    :straight t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Embark

[[https://github.com/oantolin/embark][Embark]] is a *very* useful package that often newbies miss. It's one of the features that many power users of Emacs use. Let me show
you how it improves your Emacs experience:

Let's say you want to kill a buffer. This, without Embark, will be done by:
- Pressing C-x k
- Select the buffer and press Enter

This is how it's normally done. While this works, what if you wanted to do this /a lot/? This is where Embark comes. You can execute
this without leaving the minibuffer! Let me show tell you how this works, with the same scenario, but to delete many buffers:

- You press C-x b instead of C-x k
- Select the buffer you want to delete currently
- Press C-. (popular keybinding to use Embark. It's the same in this config)
- Select what you want to do with that buffer. In our case, it's delete so type d

This is just the simplest example to how Embark can be useful to you. This can be done anywhere! The setup is pretty simple:

#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :bind (("C-." . embark-act)
	   ("C-;" . embark-dwim))
    :config
    ;; This hides the modeline for Embark windows
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))
#+end_src

** Corfu

[[https://github.com/minad/corfu][Corfu]] is a in-buffer completion framework for Emacs. Think of the completion popup you see in editors, yeah this package handles that.
There's an alternative to Corfu: [[https://github.com/company-mode/company-mode][Company]], but it's more bloated and old. Corfu is leaner and works best for me. The installation is
simple as hell:

#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :custom
    (corfu-auto t) ;; Enables autocompletion. Not turned on by default...
    :init (global-corfu-mode))
#+end_src

** Kind Icon

[[https://github.com/jdtsmith/kind-icon][Kind Icon]] is a package that adds icons to Corfu. It makes the already perfect Corfu even better! The setup is simple, as always!
(directly copy-pasted from the README, with straight.el integration)

#+begin_src emacs-lisp
  (use-package kind-icon
    :straight t
    :after corfu
    :custom
    (kind-icon-blend-background t)
    (kind-icon-default-face 'corfu-default) ;; Only needed with blend-background
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** Magit

[[https://magit.vc/][Magit]] is a very powerful Git client for Emacs. In fact, most of the editors use Magit as inspiration for their Git client. 
The installation is simple too!

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :defer t)
#+end_src

** LSP Mode and related packages

There are currently 3 ways you can add LSP support for Emacs:

- Eglot: The built-in package for Emacs
- lsp-mode: The standard package for Emacs when it comes to LSP. The most used LSP package before Eglot was made
- lsp-bridge: The fastest one in this list, but experimental and does not support usual completion packages like
  Corfu and Company

The reason why I chose lsp-mode instead of the other 3 are:

- It's the most used (duh)
- It supports dap-mode, a package necessary for debugging your code in Emacs
- It is the most feature rich! You have code lens, references and more!

LSP mode is easy to setup, but it is a bit repetitive for language support. When it comes to programming languages,
I'll do it for the most popular ones and the ones I personally use (like not-so-popular languages like Common Lisp and
Clojure).

First, let's install the LSP packages:

#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :defer t
    :commands lsp)
#+end_src

Next, for an upgrade let's install Flycheck. It's an upgrade from the slow and ugly Flymake (no offense, it's just slow).

#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :defer t)
#+end_src

Next, it's lsp-ui

#+begin_src emacs-lisp
  (use-package lsp-ui
    :straight t
    :defer t)
#+end_src

Now, dap-mode

#+begin_src emacs-lisp
  (use-package dap-mode
    :straight t
    :defer t)
#+end_src

And we're ready to go to language-specific settings. That's it for the packages section. Now we're gonna install language support
for programming languages.

* Language Support

This section is gonna install language support for all of these languages:
- Web (HTML, PHP, JSX and templating languages like these)
- Python
- Ruby
- Rust
- Clojure

Along with this, if there is any quality of life packages specifically made for these languages like REPLs and such, it will also
be installed here. More languages will be added when I have time for it!

But before I start installing languages, I need to add some minor modes for programming buffers. I'll comment what they are:

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'hl-line-mode) ;; Highlights the current line
  (add-hook 'prog-mode-hook 'electric-pair-mode) ;; Autopairs ( with )
#+end_src

Now, to the installation:

** Web (HTML, PHP, JSX and templating languages like these)

For this, all you need is web-mode and enabling LSP in that buffer, and LSP mode is gonna run the relevant langauge server for
the buffer's file extension. Pretty cool!

#+begin_src emacs-lisp
  (use-package web-mode
    :straight t
    :defer t
    :mode (("\\.phtml\\'" . web-mode)
	   ("\\.tpl\\.php\\'" . web-mode)
	   ("\\.[agj]sp\\'" . web-mode)
	   ("\\.as[cp]x\\'" . web-mode)
	   ("\\.erb\\'" . web-mode)
	   ("\\.mustache\\'" . web-mode)
	   ("\\.djhtml\\'" . web-mode))
    :config
    :hook ((web-mode . lsp-deferred)))
#+end_src

** Python

Python is a general purpose programming language that almost everyone knows of right now.

Nothing special is needed here, the major mode is already installed and you just have to enable LSP

#+begin_src emacs-lisp
  (use-package python-mode
    :defer t
    :hook ((python-mode . lsp-deferred)))
#+end_src

** Ruby

Ruby is a general purpose programming language that is exclusively known for the Ruby on Rails web framework

Same here, just enable LSP

#+begin_src emacs-lisp
  (use-package ruby-mode
    :defer t
    :hook ((ruby-mode . lsp-deferred)))
#+end_src

** Rust

Rust is a safer system language that can interop with C and C++, without the memory issues and with the performance of C++!

The major mode is not installed by default, so we need that first!

#+begin_src emacs-lisp
  (use-package rust-mode
    :straight t
    :defer t
    :hook ((rust-mode . lsp-deferred)))
#+end_src

** Clojure

Clojure is a Lisp-like language for the JVM, which can use Java code with ease!

The major mode, like Rust, is also not installed by default

#+begin_src emacs-lisp
  (use-package clojure-mode
    :straight t
    :defer t
    :hook ((clojure-mode . lsp-deferred)
	   (clojurescript-mode . lsp-deferred)))
#+end_src

You know what they say, you ain't a good Lisper without a REPL, so we need [[https://cider.mx/][CIDER]]! Installation is pretty simple, just these 3
lines of code:

#+begin_src emacs-lisp
  (use-package cider
    :straight t
    :defer t)
#+end_src
